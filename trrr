#!/usr/bin/env perl

use strict;
use warnings;

use URL::Encode qw< url_encode_utf8>;
use Term::ANSIColor;
use App::trrr::KAT qw< kat >;
use App::trrr::TPB qw< tpb >;
use App::trrr::RBG qw< rbg >;
use App::trrr::YTS qw< yts >;
use App::trrr::EXT qw< ext >;
use App::trrr::X137 qw< x137 >;
use App::trrr::LME qw< lme >;
use App::trrr::Clipboard qw< clipboard >;
binmode(STDOUT, ":encoding(UTF-8)"); # https://stackoverflow.com/a/47940728

our $VERSION = '0.22';


my @keyword = ();
if( scalar @ARGV == 0 or (scalar @ARGV == 1 and $ARGV[0] =~ /^-(p|r|y|k|e|x|l|[A-O])$/) ){
    my $clipboard = clipboard();
    $clipboard =~ s/\n/ /g;
    $clipboard =~ s/^ //;
    $clipboard =~ s/\s+$//;
    push @keyword, split(/\s+/, $clipboard);
}


my $opt = {
    seeds   =>  1,
    api     =>  "tpb"
};

if( -f "$ENV{HOME}/.trrr" ){
    open my $conf, '<', "$ENV{HOME}/.trrr";
    while(<$conf>){
        chomp;
        next if /(#|^$)/;
        next unless /:/;
        my( $field, $value ) = split /:\s*/, $_;
        $field =~ s/source/api/;
        if($field eq 'api'){
            print "unrecognized source '$value'\n" and exit unless $value =~ /^(tpb|rbg|yts|kat|ext|x137|lme)$/;
        }
        $opt->{$field} = $value if $field =~ /^(seeds|api)$/;
    }
    close $conf;
}
else {
    open my $conf, '>', "$ENV{HOME}/.trrr";
    print $conf "# minimum number of seeds the results should contain\nseeds: $opt->{seeds}\n\n"; 
    print $conf "# source which should be used when no option is passed to trrr: recognized options are: tpb(piratebay), rbg(rarbg), yts, kat(kickasstorrents), ext(extratorrents, x137(1337x), lme(limetorrents)\nsource: $opt->{api}\n\n"; 
    close $conf;
}


for(@ARGV){
    if(/^\-(h|-help|help|[A-O]|v|p|r|y|k|e|x|l)$/){
        s/\-//;
        if(/^(h|-help|help)$/){ help() and exit }
        if(/^(v)$/){ print "$VERSION\n" and exit }
        if(/^[A-O]$/){ $opt->{key} = $_ }
        if(/^p$/){ $opt->{api} = "tpb" }
        if(/^r$/){ $opt->{api} = "rbg" }
        if(/^y$/){ $opt->{api} = "yts" }
        if(/^k$/){ $opt->{api} = "kat" }
        if(/^e$/){ $opt->{api} = "ext" }
        if(/^x$/){ $opt->{api} = "x137" }
        if(/^l$/){ $opt->{api} = "lme" }
    } elsif(/^\-[a-z]$/){
        print "unknown option $_\n" and exit;
    } else { push @keyword, $_ }
}


my $term_width = 0; 
open(my $tput_ph, '-|', 'tput', 'cols');
while(<$tput_ph>){
    chomp;
    $term_width = $_;
}
close $tput_ph;


my $os = $^O;
open(my $os_ph, '-|', 'uname', '-a');
while(<$os_ph>){
    $os = 'ios' if /iPhone|iPad/;
}
close $os_ph;


sub dep{
    my $dep = shift;

    open( my $depph, "-|", 'which', $dep );
    while(<$depph>){
        chomp;
        return $_ if /\/$dep$/;
    }
}


sub open_magnet{
    my $magnet = shift;

    if($os eq 'MSWin32' or $os eq 'msys'){
        system("$magnet") and exit;
    } elsif( $os =~ /ios/){
        if( clipboard($magnet) ){
            print "Magnet link has been placed into pasteboard\n";
        } else {
            print "$magnet\n";
        }
    } elsif( $os =~ /(linux|darwin)/ ){
        print "Can't open magnet link, 'open' tool not installed.\n" and exit unless dep('open');
        system(qq(open "$magnet"));  
    }
}


sub show {
    no strict "refs";

    my $keywords = url_encode_utf8( join(' ', @keyword) );
    my @result = grep { int($_->{seeds}) >= int($opt->{seeds}) } @{ $opt->{api}($keywords) };
    @result = sort { $b->{seeds} <=> $a->{seeds} } @result;
    @result = splice(@result,0,15);

    unless(@result){ print colored(['yellow'], 'no results') . "\n" and exit }
    
    print colored(['white on_white'], '  ') . colored(['black on_white'], $result[0]->{source}) . colored(['white on_white'], ' ') ."\n";

    my $key = 'A';
    my( $key_color ) = ();
    my $i = 1;

    for(@result){
        if( $i % 2 ){ $key_color = 'black on_white' } else { $key_color = 'white on_black' }
        $_->{key} = $key;

    	my $line = $key . ' ' . $_->{seeds} . ' ' .  $_->{title} . ' ' . $_->{category} . ' ' . $_->{size};
    	if( $term_width < length($line)){
            my $strip = length($line) - $term_width;
	        my $max = length($_->{title}) - $strip - 3;
            $_->{title} = substr($_->{title}, 0, $max);
 	        $_->{title} = $_->{title} . '...';
        } 

        if($_->{api} eq 'yts'){
		    print colored([$key_color], $key) . ' ' .  colored( ['yellow'], $_->{title} ) . ' ' . colored(['yellow'], $_->{year}) . ' ' . colored(['grey8'], $_->{category}) . "\n";
	    } else {
            print colored([$key_color], $key) . ' ' . colored(['cyan'], $_->{seeds}) . ' ' .  colored(['yellow'], $_->{title} ) . ' ' . colored(['grey8'], $_->{category}) . ' ' . colored(['bold'], $_->{size}) . "\n";
	    }
        $key++; $i++;
    }
    wait_key(\@result);
}

sub wait_key {
    my $result = shift;

    if( $opt->{key} ){
	    get_torrent($result) and exit;
    } else {
        if( $^O eq 'MSWin32' or $^O eq 'msys' ){ 
            print "To pick from results repeat search and add -[key] (e.g. -a)\n" and exit;
        }

        print '  ' . colored(['grey5 on_white'],'P') . colored(['white on_grey3'],'RESS') . colored(['grey5 on_white'],'K') . colored(['white on_grey3'],'EY') . colored(['white on_white'],'') . "\n";

        require App::trrr::HotKey;
        App::trrr::HotKey->import( 'readkey' ) ;
        $opt->{key} = uc readkey();
        get_torrent($result);
    }
}

sub get_torrent {
    no strict "refs";
    my $result = shift;
    my( $picked ) = grep { $_->{key} eq $opt->{key} } @$result;

    if( $picked->{magnet} ){
	    open_magnet("$picked->{magnet}") if $opt->{key} =~ /[A-O]/;
    } else { 
        open_magnet( $picked->{api}("$picked->{link}") ) if $opt->{key} =~ /[A-O]/;
    }
}


sub help {
    my $help = <<'END_HELP';
trrr - search torrents

E.g:
       "trrr keyword1 keyword2" search for keywords on piratebay
       "trrr keyword1 keyword2 -k" search for keywords on kickasstorrents 
Options: 
       "-p" piratebay
       "-r" rarbg
       "-y" yts
       "-k" kickasstorrents
       "-x" 1337x
       "-l" limetorrents
       
       "-A" open first (A) magnet link from results without waiting for key press
       "perldoc trrr" read more
END_HELP

    print "$help\n";
}


show();

=head1 NAME

App::trrr - search torrents 

=head1 VERSION

This document describes trrr version 0.21

=head1 DESCRIPTION
    
Tool for searching torrents. Results are sorted by number of seeders and each is mapped to keyboard key. Pressing the key will open magnet link in your default torrent client. On iOS magnet link is placed into clipboard instead.

=head1 USAGE
    
- Search with as many keywords as needed.

=over 10

C<trrr keyword1 keyword2 keywordN>

=back

- trrr uses source option from '~/.trrr' conf. To use different torrent source add one of the following options. 

=over 10

C<-p> piratebay

C<-r> rarbg

C<-y> yts

C<-k> kickasstorrents

C<-x> 1337x

C<-l> limetorrents

=back

- start it without any parameter and it'll use clipboard content as keywords. ( this needs 'xclip' or 'xsel' to be installed on Linux )

=over 10

C<trrr>

=back

- To automaticaly open some magnet link from results add its key -[A-O] as an option. 
  E.g: to open first (A) magnet link use following command.

=over 10

C<trrr keyword1 keyword2 keywordN -A>

=back

On Windows running 'Git/Bash for Windows' you have to specify key upfront so first make search without any option to see the results, then repeat the command and add key -[A-O] as an option. 

- To see help use C<-h> option.


=head1 AUTHOR

Zdenek Bohunek. <zdenek@cpan.org>

App::Trr::HotKey is taken from StackOverflow post by brian d foy

=head1 COPYRIGHT AND LICENSE

Copyright 2016 by Zdenek Bohunek

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
